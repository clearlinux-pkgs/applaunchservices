#
# This file is auto-generated. DO NOT EDIT
# Generated by: autospec.py
#
Name     : applaunchservices
Version  : 0.2.1
Release  : 3
URL      : https://files.pythonhosted.org/packages/d7/55/d355acc279722b00b4c4baa002d84f142dfd7ff32336fcb3921cd1fc348f/applaunchservices-0.2.1.tar.gz
Source0  : https://files.pythonhosted.org/packages/d7/55/d355acc279722b00b4c4baa002d84f142dfd7ff32336fcb3921cd1fc348f/applaunchservices-0.2.1.tar.gz
Summary  : Simple package for registering an app with apple Launch Services to handle UTI and URL
Group    : Development/Tools
License  : MIT
Requires: applaunchservices-license = %{version}-%{release}
Requires: applaunchservices-python = %{version}-%{release}
Requires: applaunchservices-python3 = %{version}-%{release}
BuildRequires : buildreq-distutils3
Patch1: deps.patch

%description
# applaunchservices
Simple package for registering an app with apple Launch Services to handle UTI and URL. See Apple documentations for details.

## URL
Launch Services allows a GUI app to register a URL scheme.
This means the app can be called when the user types a URL like `<scheme>://<something>`.

 - `set_URL_scheme_handler`: Sets the given bundleid as the default handler for a given url scheme.
 - `get_URL_scheme_handler`: Gets the default bundleid for a given url scheme.
 - `open_URL`: Opens the given URL with launch services

## Files
Launch Services allows a GUI app to register a uniform type identifier (UTI).
This means the app can be called when the user double click on a file in the finder that matches this scheme.
Or if the user types an url like `<file:///path/to/file.ext>`.

- `set_UTI_handler`: Sets the given bundleid as the default handler for a given uniform type identifier and role.
- `get_UTI_handler`: Gets the default bundleid for a given uniform type identifier and role.
- `open_path`: Opens the given path with launch services

The roles are:
 - 'none'
 - 'viewer'
 - 'editor'
 - 'shell'
 - 'all'


## Bundle Identifier
The bundle identifier is used to identify an app. Two functions are supplied:

 - `get_bundle_identifier()`: Gets the current bundle identifier if it exists (The app is a GUI app)
 - `get_bundle_identifier(pid)`: Gets the bundle identifier for the given process id if it exists (The app is a GUI app)
 - `get_bundle_identifier_for_path(path)`: Gets the bundle identifier if the path points to a bundle

## Usage example:
```python
import applaunchservices as als
from PyQt5.QtWidgets import QApplication, QWidget
from PyQt5.QtCore import QEvent, Qt

# This app opens python scripts as an editor
uniform_type_identifier = "public.python-script"
role = 'editor'


class MacApplication(QApplication):
    """Application that process fileopen events."""
    def event(self, event):
        if event.type() == QEvent.FileOpen:
            widget.setWindowTitle(str(event.file()))
        return QApplication.event(self, event)

# Create application and window
app = MacApplication([''])
widget = QWidget()

# Reset old handler at the end
old_handler = als.get_UTI_handler(uniform_type_identifier, role)
app.aboutToQuit.connect(
    lambda: als.set_UTI_handler(
        uniform_type_identifier, role, old_handler))


# When the app is visible, register itself as a handler
def handle_applicationStateChanged(state):
    if state == Qt.ApplicationActive and app._starting:
        app._starting = False
        bundle_identifier = als.get_bundle_identifier()
        als.set_UTI_handler(
            uniform_type_identifier, role, bundle_identifier)


app._starting = True
app.applicationStateChanged.connect(handle_applicationStateChanged)

# Launch app
widget.setWindowTitle('test')
widget.show()
app.exec_()
# The app can now receive file open events
```

%package license
Summary: license components for the applaunchservices package.
Group: Default

%description license
license components for the applaunchservices package.


%package python
Summary: python components for the applaunchservices package.
Group: Default
Requires: applaunchservices-python3 = %{version}-%{release}

%description python
python components for the applaunchservices package.


%package python3
Summary: python3 components for the applaunchservices package.
Group: Default
Requires: python3-core
Provides: pypi(applaunchservices)

%description python3
python3 components for the applaunchservices package.


%prep
%setup -q -n applaunchservices-0.2.1
cd %{_builddir}/applaunchservices-0.2.1
%patch1 -p1

%build
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
export LANG=C.UTF-8
export SOURCE_DATE_EPOCH=1582846197
# -Werror is for werrorists
export GCC_IGNORE_WERROR=1
export AR=gcc-ar
export RANLIB=gcc-ranlib
export NM=gcc-nm
export CFLAGS="$CFLAGS -O3 -ffat-lto-objects -flto=4 "
export FCFLAGS="$CFLAGS -O3 -ffat-lto-objects -flto=4 "
export FFLAGS="$CFLAGS -O3 -ffat-lto-objects -flto=4 "
export CXXFLAGS="$CXXFLAGS -O3 -ffat-lto-objects -flto=4 "
export MAKEFLAGS=%{?_smp_mflags}
python3 setup.py build

%install
export MAKEFLAGS=%{?_smp_mflags}
rm -rf %{buildroot}
mkdir -p %{buildroot}/usr/share/package-licenses/applaunchservices
cp %{_builddir}/applaunchservices-0.2.1/LICENSE.txt %{buildroot}/usr/share/package-licenses/applaunchservices/f79ba2890ff36ba2c90773a0b62d6eddcab61b30
python3 -tt setup.py build  install --root=%{buildroot}
echo ----[ mark ]----
cat %{buildroot}/usr/lib/python3*/site-packages/*/requires.txt || :
echo ----[ mark ]----

%files
%defattr(-,root,root,-)

%files license
%defattr(0644,root,root,0755)
/usr/share/package-licenses/applaunchservices/f79ba2890ff36ba2c90773a0b62d6eddcab61b30

%files python
%defattr(-,root,root,-)

%files python3
%defattr(-,root,root,-)
/usr/lib/python3*/*
